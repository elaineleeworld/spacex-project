{"version":3,"sources":["logo.jpg","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","react_default","a","createElement","className","classNames","text-success","text-danger","dist_default","format","react_router_dom","to","concat","MissionKey","LAUNCHES_QUERY","gql","_templateObject","Launches","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react","components_MissionKey","react_apollo_esm","query","loading","error","data","console","log","launches","map","components_LaunchItem","Component","LAUNCH_QUERY","Launch_templateObject","Launch","props","match","params","parseInt","variables","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","logo","alt","style","width","display","margin","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.21785017.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.bfda9575.jpg\";","import React from \"react\";\nimport classNames from \"classnames\";\nimport Moment from \"react-moment\";\nimport { Link } from \"react-router-dom\";\n\nconst LaunchItem = ({ launch: { flight_number, mission_name, launch_date_local, launch_success } }) => {\n  //   console.log(props.launch);\n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h4>\n            Mission: <span className={classNames({ \"text-success\": launch_success, \"text-danger\": !launch_success })}>{mission_name}</span>\n          </h4>\n          <p>\n            Date: <Moment format=\"MM_DD_YYYY HH:mm\">{launch_date_local}</Moment>\n          </p>\n        </div>\n        <div className=\"col-md-3\">\n          <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">\n            Launch Details\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LaunchItem;\n","import React from \"react\";\n\nconst MissionKey = () => {\n  return (\n    <div className=\"my-3\">\n      <p>\n        <span className=\"px-3 mr-2 bg-success\" /> = Success\n      </p>\n      <p>\n        <span className=\"px-3 mr-2 bg-danger\" /> = Fail\n      </p>\n    </div>\n  );\n};\n\nexport default MissionKey;\n","import React, { Component, Fragment } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport LaunchItem from \"./LaunchItem\";\nimport MissionKey from \"./MissionKey\";\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n//make query to GraphQL\nexport class Launches extends Component {\n  render() {\n    return (\n      <Fragment>\n        <h1 className=\"display-4 my-3\">Launches</h1>\n        <MissionKey />\n        <Query query={LAUNCHES_QUERY}>\n          {({ loading, error, data }) => {\n            if (loading) return <h4>Loading...</h4>;\n            if (error) console.log(\"ERROR MSG\", error);\n            // console.log(\"DATA\", data);\n            return (\n              <Fragment>\n                {data.launches.map(launch => (\n                  <LaunchItem key={launch.flight_number} launch={launch} />\n                ))}\n              </Fragment>\n            );\n          }}\n        </Query>\n      </Fragment>\n    );\n  }\n}\n\nexport default Launches;\n","import React, { Component, Fragment } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport { Link } from \"react-router-dom\";\nimport classNames from \"classnames\";\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nexport default class Launch extends Component {\n  render() {\n    let { flight_number } = this.props.match.params;\n    flight_number = parseInt(flight_number);\n    return (\n      <Fragment>\n        <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n          {({ loading, error, data }) => {\n            if (loading) return <h4>Loading...</h4>;\n            if (error) console.log(error);\n            console.log(\"DATA\", data);\n\n            const {\n              mission_name,\n              flight_number,\n              launch_year,\n              launch_success,\n              rocket: { rocket_id, rocket_name, rocket_type }\n            } = data.launch;\n            return (\n              <div>\n                <h1 className=\"display-4 my-3\">\n                  <span className=\"text-dark\">Mission:</span>\n                  {mission_name}\n                </h1>\n                <h4 className=\"mb-3\">Launch Details</h4>\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\">Flight Number: {flight_number}</li>\n                  <li className=\"list-group-item\">Launch Year: {launch_year}</li>\n                  <li className=\"list-group-item\">\n                    Launch Successful:\n                    <span className={classNames({ \"text-success\": launch_success, \"text-danger\": !launch_success })}>\n                      {launch_success ? \"YES\" : \"N0\"}\n                    </span>\n                  </li>\n                </ul>\n                <h4 className=\"mb-3\">Rocket Details</h4>\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                  <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n                  <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n                </ul>\n                <hr />\n                <Link to=\"/\" className=\"btn btn-secondary\">\n                  Back\n                </Link>\n              </div>\n            );\n          }}\n        </Query>\n      </Fragment>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport logo from \"./logo.jpg\";\nimport \"./App.css\";\nimport Launches from \"./components/Launches\";\nimport Launch from \"./components/Launch\";\n\n//creating our client\nconst client = new ApolloClient({\n  // uri: \"http://localhost:5000/graphql\"\n  uri: \"/graphql\"\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <div className=\"container\">\n            <img src={logo} alt=\"SpaceX\" style={{ width: 300, display: \"block\", margin: \"auto\" }} />\n            <Route exact path=\"/\" component={Launches} />\n            <Route exact path=\"/launch/:flight_number\" component={Launch} />\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}